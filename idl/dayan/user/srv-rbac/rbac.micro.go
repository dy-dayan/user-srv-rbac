// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rbac.proto

/*
Package dayan_user_srv_rbac is a generated protocol buffer package.

It is generated from these files:
	rbac.proto

It has these top-level messages:
	AddRoleReq
	AddRoleResp
	DelRoleReq
	DelRoleResp
	AddAccessReq
	AddAccessResp
	DelAccessReq
	DelAccessResp
	AssignRoleAccessReq
	AssignRoleAccessResp
	RemoveRoleAccessReq
	RemoveRoleAccessResp
*/
package dayan_user_srv_rbac

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/dy-dayan/user-srv-rbac/idl"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RBAC service

type RBACService interface {
	// 添加角色
	AddRole(ctx context.Context, in *AddRoleReq, opts ...client.CallOption) (*AddRoleResp, error)
	// 删除角色
	DelRole(ctx context.Context, in *DelRoleReq, opts ...client.CallOption) (*DelRoleResp, error)
	// 添加权限
	AddAccess(ctx context.Context, in *AddAccessReq, opts ...client.CallOption) (*AddAccessResp, error)
	// 添加角色
	DelAccess(ctx context.Context, in *DelAccessReq, opts ...client.CallOption) (*DelAccessResp, error)
	// 为角色添加权限
	AssignRoleAccess(ctx context.Context, in *AssignRoleAccessReq, opts ...client.CallOption) (*AssignRoleAccessResp, error)
	// 为角色添加权限
	RemoveRoleAccess(ctx context.Context, in *RemoveRoleAccessReq, opts ...client.CallOption) (*RemoveRoleAccessResp, error)
}

type rBACService struct {
	c    client.Client
	name string
}

func NewRBACService(name string, c client.Client) RBACService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dayan.user.srv.rbac"
	}
	return &rBACService{
		c:    c,
		name: name,
	}
}

func (c *rBACService) AddRole(ctx context.Context, in *AddRoleReq, opts ...client.CallOption) (*AddRoleResp, error) {
	req := c.c.NewRequest(c.name, "RBAC.AddRole", in)
	out := new(AddRoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DelRole(ctx context.Context, in *DelRoleReq, opts ...client.CallOption) (*DelRoleResp, error) {
	req := c.c.NewRequest(c.name, "RBAC.DelRole", in)
	out := new(DelRoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AddAccess(ctx context.Context, in *AddAccessReq, opts ...client.CallOption) (*AddAccessResp, error) {
	req := c.c.NewRequest(c.name, "RBAC.AddAccess", in)
	out := new(AddAccessResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DelAccess(ctx context.Context, in *DelAccessReq, opts ...client.CallOption) (*DelAccessResp, error) {
	req := c.c.NewRequest(c.name, "RBAC.DelAccess", in)
	out := new(DelAccessResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AssignRoleAccess(ctx context.Context, in *AssignRoleAccessReq, opts ...client.CallOption) (*AssignRoleAccessResp, error) {
	req := c.c.NewRequest(c.name, "RBAC.AssignRoleAccess", in)
	out := new(AssignRoleAccessResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) RemoveRoleAccess(ctx context.Context, in *RemoveRoleAccessReq, opts ...client.CallOption) (*RemoveRoleAccessResp, error) {
	req := c.c.NewRequest(c.name, "RBAC.RemoveRoleAccess", in)
	out := new(RemoveRoleAccessResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RBAC service

type RBACHandler interface {
	// 添加角色
	AddRole(context.Context, *AddRoleReq, *AddRoleResp) error
	// 删除角色
	DelRole(context.Context, *DelRoleReq, *DelRoleResp) error
	// 添加权限
	AddAccess(context.Context, *AddAccessReq, *AddAccessResp) error
	// 添加角色
	DelAccess(context.Context, *DelAccessReq, *DelAccessResp) error
	// 为角色添加权限
	AssignRoleAccess(context.Context, *AssignRoleAccessReq, *AssignRoleAccessResp) error
	// 为角色添加权限
	RemoveRoleAccess(context.Context, *RemoveRoleAccessReq, *RemoveRoleAccessResp) error
}

func RegisterRBACHandler(s server.Server, hdlr RBACHandler, opts ...server.HandlerOption) error {
	type rBAC interface {
		AddRole(ctx context.Context, in *AddRoleReq, out *AddRoleResp) error
		DelRole(ctx context.Context, in *DelRoleReq, out *DelRoleResp) error
		AddAccess(ctx context.Context, in *AddAccessReq, out *AddAccessResp) error
		DelAccess(ctx context.Context, in *DelAccessReq, out *DelAccessResp) error
		AssignRoleAccess(ctx context.Context, in *AssignRoleAccessReq, out *AssignRoleAccessResp) error
		RemoveRoleAccess(ctx context.Context, in *RemoveRoleAccessReq, out *RemoveRoleAccessResp) error
	}
	type RBAC struct {
		rBAC
	}
	h := &rBACHandler{hdlr}
	return s.Handle(s.NewHandler(&RBAC{h}, opts...))
}

type rBACHandler struct {
	RBACHandler
}

func (h *rBACHandler) AddRole(ctx context.Context, in *AddRoleReq, out *AddRoleResp) error {
	return h.RBACHandler.AddRole(ctx, in, out)
}

func (h *rBACHandler) DelRole(ctx context.Context, in *DelRoleReq, out *DelRoleResp) error {
	return h.RBACHandler.DelRole(ctx, in, out)
}

func (h *rBACHandler) AddAccess(ctx context.Context, in *AddAccessReq, out *AddAccessResp) error {
	return h.RBACHandler.AddAccess(ctx, in, out)
}

func (h *rBACHandler) DelAccess(ctx context.Context, in *DelAccessReq, out *DelAccessResp) error {
	return h.RBACHandler.DelAccess(ctx, in, out)
}

func (h *rBACHandler) AssignRoleAccess(ctx context.Context, in *AssignRoleAccessReq, out *AssignRoleAccessResp) error {
	return h.RBACHandler.AssignRoleAccess(ctx, in, out)
}

func (h *rBACHandler) RemoveRoleAccess(ctx context.Context, in *RemoveRoleAccessReq, out *RemoveRoleAccessResp) error {
	return h.RBACHandler.RemoveRoleAccess(ctx, in, out)
}
